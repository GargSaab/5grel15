/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UEContextInSMSFDataRetrievalAPIController binds http requests to an api service and writes the service results to the http response
type UEContextInSMSFDataRetrievalAPIController struct {
	service      UEContextInSMSFDataRetrievalAPIServicer
	errorHandler ErrorHandler
}

// UEContextInSMSFDataRetrievalAPIOption for how the controller is set up.
type UEContextInSMSFDataRetrievalAPIOption func(*UEContextInSMSFDataRetrievalAPIController)

// WithUEContextInSMSFDataRetrievalAPIErrorHandler inject ErrorHandler into controller
func WithUEContextInSMSFDataRetrievalAPIErrorHandler(h ErrorHandler) UEContextInSMSFDataRetrievalAPIOption {
	return func(c *UEContextInSMSFDataRetrievalAPIController) {
		c.errorHandler = h
	}
}

// NewUEContextInSMSFDataRetrievalAPIController creates a default api controller
func NewUEContextInSMSFDataRetrievalAPIController(s UEContextInSMSFDataRetrievalAPIServicer, opts ...UEContextInSMSFDataRetrievalAPIOption) Router {
	controller := &UEContextInSMSFDataRetrievalAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UEContextInSMSFDataRetrievalAPIController
func (c *UEContextInSMSFDataRetrievalAPIController) Routes() Routes {
	return Routes{
		"GetUeCtxInSmsfData": Route{
			strings.ToUpper("Get"),
			"/nudm-sdm/v2/{supi}/ue-context-in-smsf-data",
			c.GetUeCtxInSmsfData,
		},
	}
}

// GetUeCtxInSmsfData - retrieve a UE's UE Context In SMSF Data
func (c *UEContextInSMSFDataRetrievalAPIController) GetUeCtxInSmsfData(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	supiParam := params["supi"]
	if supiParam == "" {
		c.errorHandler(w, r, &RequiredError{"supi"}, nil)
		return
	}
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	result, err := c.service.GetUeCtxInSmsfData(r.Context(), supiParam, supportedFeaturesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
