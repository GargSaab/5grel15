/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// QmcConfigInfo - It contains the configuration information for signaling-based activation of the  Quality of Experience (QoE) Measurements Collection (QMC) functionality.  
type QmcConfigInfo struct {

	// String containing MCC (3 digits), MNC (2 or 3 digits)  and QMC ID (3 octets, encoded as 6 hexadecimal digits). 
	QoeReference string `json:"qoeReference"`

	ServiceType QoeServiceType `json:"serviceType,omitempty"`

	SliceScope []Snssai `json:"sliceScope,omitempty"`

	AreaScope QmcAreaScope `json:"areaScope,omitempty"`

	QoeCollectionEntityAddress *IpAddr `json:"qoeCollectionEntityAddress,omitempty"`

	QoeTarget QoeTarget `json:"qoeTarget,omitempty"`

	// String containing: - Trace Reference: MCC (3 digits), MNC (2 or 3 digits),    Trace ID (3 octets, encoded as 6 hexadecimal digits) - Trace Recording Session Reference (2 octets, encoded as 4 hexadecimal digits) 
	MdtAlignmentInfo *interface{} `json:"mdtAlignmentInfo,omitempty"`

	AvailableRanVisibleQoeMetrics []AvailableRanVisibleQoeMetric `json:"availableRanVisibleQoeMetrics,omitempty"`

	// string with format 'bytes' as defined in OpenAPI
	ContainerForAppLayerMeasConfig string `json:"containerForAppLayerMeasConfig,omitempty"`

	MbsCommunicationServiceType MbsServiceType `json:"mbsCommunicationServiceType,omitempty"`
}

// AssertQmcConfigInfoRequired checks if the required fields are not zero-ed
func AssertQmcConfigInfoRequired(obj QmcConfigInfo) error {
	elements := map[string]interface{}{
		"qoeReference": obj.QoeReference,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertQoeServiceTypeRequired(obj.ServiceType); err != nil {
		return err
	}
	for _, el := range obj.SliceScope {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	if err := AssertQmcAreaScopeRequired(obj.AreaScope); err != nil {
		return err
	}
	if obj.QoeCollectionEntityAddress != nil {
		if err := AssertIpAddrRequired(*obj.QoeCollectionEntityAddress); err != nil {
			return err
		}
	}
	if err := AssertQoeTargetRequired(obj.QoeTarget); err != nil {
		return err
	}
	for _, el := range obj.AvailableRanVisibleQoeMetrics {
		if err := AssertAvailableRanVisibleQoeMetricRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMbsServiceTypeRequired(obj.MbsCommunicationServiceType); err != nil {
		return err
	}
	return nil
}

// AssertQmcConfigInfoConstraints checks if the values respects the defined constraints
func AssertQmcConfigInfoConstraints(obj QmcConfigInfo) error {
	return nil
}
