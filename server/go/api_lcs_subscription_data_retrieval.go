/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LCSSubscriptionDataRetrievalAPIController binds http requests to an api service and writes the service results to the http response
type LCSSubscriptionDataRetrievalAPIController struct {
	service      LCSSubscriptionDataRetrievalAPIServicer
	errorHandler ErrorHandler
}

// LCSSubscriptionDataRetrievalAPIOption for how the controller is set up.
type LCSSubscriptionDataRetrievalAPIOption func(*LCSSubscriptionDataRetrievalAPIController)

// WithLCSSubscriptionDataRetrievalAPIErrorHandler inject ErrorHandler into controller
func WithLCSSubscriptionDataRetrievalAPIErrorHandler(h ErrorHandler) LCSSubscriptionDataRetrievalAPIOption {
	return func(c *LCSSubscriptionDataRetrievalAPIController) {
		c.errorHandler = h
	}
}

// NewLCSSubscriptionDataRetrievalAPIController creates a default api controller
func NewLCSSubscriptionDataRetrievalAPIController(s LCSSubscriptionDataRetrievalAPIServicer, opts ...LCSSubscriptionDataRetrievalAPIOption) Router {
	controller := &LCSSubscriptionDataRetrievalAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LCSSubscriptionDataRetrievalAPIController
func (c *LCSSubscriptionDataRetrievalAPIController) Routes() Routes {
	return Routes{
		"GetLcsSubscriptionData": Route{
			strings.ToUpper("Get"),
			"/nudm-sdm/v2/{supi}/lcs-subscription-data",
			c.GetLcsSubscriptionData,
		},
	}
}

// GetLcsSubscriptionData - retrieve a UE's LCS Subscription Data
func (c *LCSSubscriptionDataRetrievalAPIController) GetLcsSubscriptionData(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	supiParam := params["supi"]
	if supiParam == "" {
		c.errorHandler(w, r, &RequiredError{"supi"}, nil)
		return
	}
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	ifNoneMatchParam := r.Header.Get("If-None-Match")
	ifModifiedSinceParam := r.Header.Get("If-Modified-Since")
	result, err := c.service.GetLcsSubscriptionData(r.Context(), supiParam, supportedFeaturesParam, ifNoneMatchParam, ifModifiedSinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
