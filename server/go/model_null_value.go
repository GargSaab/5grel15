/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// NullValue : JSON's null value.
type NullValue string

// List of NullValue
const (
	NULL NullValue = "null"
)

// AllowedNullValueEnumValues is all the allowed values of NullValue enum
var AllowedNullValueEnumValues = []NullValue{
	"null",
}

// validNullValueEnumValue provides a map of NullValues for fast verification of use input
var validNullValueEnumValues = map[NullValue]struct{}{
	"null": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NullValue) IsValid() bool {
	_, ok := validNullValueEnumValues[v]
	return ok
}

// NewNullValueFromValue returns a pointer to a valid NullValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNullValueFromValue(v string) (NullValue, error) {
	ev := NullValue(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for NullValue: valid values are %v", v, AllowedNullValueEnumValues)
	}
}



// AssertNullValueRequired checks if the required fields are not zero-ed
func AssertNullValueRequired(obj NullValue) error {
	return nil
}

// AssertNullValueConstraints checks if the values respects the defined constraints
func AssertNullValueConstraints(obj NullValue) error {
	return nil
}
