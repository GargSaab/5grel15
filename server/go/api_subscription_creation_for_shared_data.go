/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// SubscriptionCreationForSharedDataAPIController binds http requests to an api service and writes the service results to the http response
type SubscriptionCreationForSharedDataAPIController struct {
	service      SubscriptionCreationForSharedDataAPIServicer
	errorHandler ErrorHandler
}

// SubscriptionCreationForSharedDataAPIOption for how the controller is set up.
type SubscriptionCreationForSharedDataAPIOption func(*SubscriptionCreationForSharedDataAPIController)

// WithSubscriptionCreationForSharedDataAPIErrorHandler inject ErrorHandler into controller
func WithSubscriptionCreationForSharedDataAPIErrorHandler(h ErrorHandler) SubscriptionCreationForSharedDataAPIOption {
	return func(c *SubscriptionCreationForSharedDataAPIController) {
		c.errorHandler = h
	}
}

// NewSubscriptionCreationForSharedDataAPIController creates a default api controller
func NewSubscriptionCreationForSharedDataAPIController(s SubscriptionCreationForSharedDataAPIServicer, opts ...SubscriptionCreationForSharedDataAPIOption) Router {
	controller := &SubscriptionCreationForSharedDataAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubscriptionCreationForSharedDataAPIController
func (c *SubscriptionCreationForSharedDataAPIController) Routes() Routes {
	return Routes{
		"SubscribeToSharedData": Route{
			strings.ToUpper("Post"),
			"/nudm-sdm/v2/shared-data-subscriptions",
			c.SubscribeToSharedData,
		},
	}
}

// SubscribeToSharedData - subscribe to notifications for shared data
func (c *SubscriptionCreationForSharedDataAPIController) SubscribeToSharedData(w http.ResponseWriter, r *http.Request) {
	sdmSubscriptionParam := SdmSubscription{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sdmSubscriptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSdmSubscriptionRequired(sdmSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSdmSubscriptionConstraints(sdmSubscriptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SubscribeToSharedData(r.Context(), sdmSubscriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
