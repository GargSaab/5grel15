/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type DnnConfiguration struct {

	PduSessionTypes PduSessionTypes `json:"pduSessionTypes"`

	SscModes SscModes `json:"sscModes"`

	IwkEpsInd bool `json:"iwkEpsInd,omitempty"`

	Var5gQosProfile SubscribedDefaultQos `json:"5gQosProfile,omitempty"`

	SessionAmbr Ambr `json:"sessionAmbr,omitempty"`

	Var3gppChargingCharacteristics string `json:"3gppChargingCharacteristics,omitempty"`

	StaticIpAddress []IpAddress `json:"staticIpAddress,omitempty"`

	UpSecurity UpSecurity `json:"upSecurity,omitempty"`

	PduSessionContinuityInd PduSessionContinuityInd `json:"pduSessionContinuityInd,omitempty"`

	// Identity of the NEF
	NiddNefId string `json:"niddNefId,omitempty"`

	NiddInfo NiddInformation `json:"niddInfo,omitempty"`

	RedundantSessionAllowed bool `json:"redundantSessionAllowed,omitempty"`

	AcsInfo AcsInfo `json:"acsInfo,omitempty"`

	Ipv4FrameRouteList []FrameRouteInfo `json:"ipv4FrameRouteList,omitempty"`

	Ipv6FrameRouteList []FrameRouteInfo `json:"ipv6FrameRouteList,omitempty"`

	AtsssAllowed bool `json:"atsssAllowed,omitempty"`

	SecondaryAuth bool `json:"secondaryAuth,omitempty"`

	UavSecondaryAuth bool `json:"uavSecondaryAuth,omitempty"`

	DnAaaIpAddressAllocation bool `json:"dnAaaIpAddressAllocation,omitempty"`

	DnAaaAddress *IpAddress `json:"dnAaaAddress,omitempty"`

	AdditionalDnAaaAddresses []IpAddress `json:"additionalDnAaaAddresses,omitempty"`

	// Fully Qualified Domain Name
	DnAaaFqdn string `json:"dnAaaFqdn,omitempty"`

	IptvAccCtrlInfo string `json:"iptvAccCtrlInfo,omitempty"`

	Ipv4Index IpIndex `json:"ipv4Index,omitempty"`

	Ipv6Index IpIndex `json:"ipv6Index,omitempty"`

	EcsAddrConfigInfo *EcsAddrConfigInfo `json:"ecsAddrConfigInfo,omitempty"`

	AdditionalEcsAddrConfigInfos []EcsAddrConfigInfo `json:"additionalEcsAddrConfigInfos,omitempty"`

	SharedEcsAddrConfigInfo string `json:"sharedEcsAddrConfigInfo,omitempty"`

	AdditionalSharedEcsAddrConfigInfoIds []string `json:"additionalSharedEcsAddrConfigInfoIds,omitempty"`

	EasDiscoveryAuthorized bool `json:"easDiscoveryAuthorized,omitempty"`

	OnboardingInd bool `json:"onboardingInd,omitempty"`

	AerialUeInd AerialUeIndication `json:"aerialUeInd,omitempty"`

	SubscribedMaxIpv6PrefixSize int32 `json:"subscribedMaxIpv6PrefixSize,omitempty"`

	HrSboAuthorized bool `json:"hrSboAuthorized,omitempty"`
}

// AssertDnnConfigurationRequired checks if the required fields are not zero-ed
func AssertDnnConfigurationRequired(obj DnnConfiguration) error {
	elements := map[string]interface{}{
		"pduSessionTypes": obj.PduSessionTypes,
		"sscModes": obj.SscModes,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPduSessionTypesRequired(obj.PduSessionTypes); err != nil {
		return err
	}
	if err := AssertSscModesRequired(obj.SscModes); err != nil {
		return err
	}
	if err := AssertSubscribedDefaultQosRequired(obj.Var5gQosProfile); err != nil {
		return err
	}
	if err := AssertAmbrRequired(obj.SessionAmbr); err != nil {
		return err
	}
	for _, el := range obj.StaticIpAddress {
		if err := AssertIpAddressRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUpSecurityRequired(obj.UpSecurity); err != nil {
		return err
	}
	if err := AssertPduSessionContinuityIndRequired(obj.PduSessionContinuityInd); err != nil {
		return err
	}
	if err := AssertNiddInformationRequired(obj.NiddInfo); err != nil {
		return err
	}
	if err := AssertAcsInfoRequired(obj.AcsInfo); err != nil {
		return err
	}
	for _, el := range obj.Ipv4FrameRouteList {
		if err := AssertFrameRouteInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ipv6FrameRouteList {
		if err := AssertFrameRouteInfoRequired(el); err != nil {
			return err
		}
	}
	if obj.DnAaaAddress != nil {
		if err := AssertIpAddressRequired(*obj.DnAaaAddress); err != nil {
			return err
		}
	}
	for _, el := range obj.AdditionalDnAaaAddresses {
		if err := AssertIpAddressRequired(el); err != nil {
			return err
		}
	}
	if err := AssertIpIndexRequired(obj.Ipv4Index); err != nil {
		return err
	}
	if err := AssertIpIndexRequired(obj.Ipv6Index); err != nil {
		return err
	}
	if obj.EcsAddrConfigInfo != nil {
		if err := AssertEcsAddrConfigInfoRequired(*obj.EcsAddrConfigInfo); err != nil {
			return err
		}
	}
	for _, el := range obj.AdditionalEcsAddrConfigInfos {
		if err := AssertEcsAddrConfigInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAerialUeIndicationRequired(obj.AerialUeInd); err != nil {
		return err
	}
	return nil
}

// AssertDnnConfigurationConstraints checks if the values respects the defined constraints
func AssertDnnConfigurationConstraints(obj DnnConfiguration) error {
	return nil
}
