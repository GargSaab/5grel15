/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 2.3.0-alpha.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubscriptionModificationAPIController binds http requests to an api service and writes the service results to the http response
type SubscriptionModificationAPIController struct {
	service SubscriptionModificationAPIServicer
	errorHandler ErrorHandler
}

// SubscriptionModificationAPIOption for how the controller is set up.
type SubscriptionModificationAPIOption func(*SubscriptionModificationAPIController)

// WithSubscriptionModificationAPIErrorHandler inject ErrorHandler into controller
func WithSubscriptionModificationAPIErrorHandler(h ErrorHandler) SubscriptionModificationAPIOption {
	return func(c *SubscriptionModificationAPIController) {
		c.errorHandler = h
	}
}

// NewSubscriptionModificationAPIController creates a default api controller
func NewSubscriptionModificationAPIController(s SubscriptionModificationAPIServicer, opts ...SubscriptionModificationAPIOption) Router {
	controller := &SubscriptionModificationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubscriptionModificationAPIController
func (c *SubscriptionModificationAPIController) Routes() Routes {
	return Routes{
		"Modify": Route{
			strings.ToUpper("Patch"),
			"/nudm-sdm/v2/{ueId}/sdm-subscriptions/{subscriptionId}",
			c.Modify,
		},
		"ModifySharedDataSubs": Route{
			strings.ToUpper("Patch"),
			"/nudm-sdm/v2/shared-data-subscriptions/{subscriptionId}",
			c.ModifySharedDataSubs,
		},
	}
}

// Modify - modify the subscription
func (c *SubscriptionModificationAPIController) Modify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	ueIdParam := params["ueId"]
	if ueIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ueId"}, nil)
		return
	}
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	sdmSubsModificationParam := SdmSubsModification{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSdmSubsModificationRequired(sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSdmSubsModificationConstraints(sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	result, err := c.service.Modify(r.Context(), ueIdParam, subscriptionIdParam, sdmSubsModificationParam, supportedFeaturesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ModifySharedDataSubs - modify the subscription
func (c *SubscriptionModificationAPIController) ModifySharedDataSubs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	subscriptionIdParam := params["subscriptionId"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscriptionId"}, nil)
		return
	}
	sdmSubsModificationParam := SdmSubsModification{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSdmSubsModificationRequired(sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSdmSubsModificationConstraints(sdmSubsModificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var supportedFeaturesParam string
	if query.Has("supported-features") {
		supportedFeaturesParam = query.Get("supported-features")
	}
	result, err := c.service.ModifySharedDataSubs(r.Context(), subscriptionIdParam, sdmSubsModificationParam, supportedFeaturesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
